# Types

# User Types
type User {
  id: ID
  username: String
  active: Boolean
}

type PersonalInformation {
  id: ID
  dni: Int
  firstname: String
  lastname: String
  address: String
  phone: String
  email: String
}

# Invoice Types
type Invoice {
  id: ID
  number: Int
  type: InvoiceTypes
  dateEmit: String
  paymentType: PaymentTypes
  paid: Boolean
  note: String
  user: User
  person: PersonalInformation
  products: [ProductInvoice]
}

type ProductInvoice {
  product: Product
  name: String
  quantity: Int
  price: Int
}

# Treasury Types
type Account {
  id: ID
  name: String
  bank: String
  type: AccountTypes
  number: String
}

# Inventory Types
type Warehouse {
  id: ID
  name: String
  description: String
  active: Boolean
}

type Product {
  id: ID
  name: String
  price: Int
  stock: Int
  iva: Int
  description: String
  active: Boolean
  warehouse: ID
}

# Enums

# Invoice Enums
enum InvoiceTypes {
  PURCHASE
  SALE
}

enum PaymentTypes {
  CASH
  TRANSFERENCE
}

# Treasury Enums
enum AccountTypes {
  CURRENT
  SAVING
}

# Inputs

# User Inputs
input UserInput {
  id: ID
  username: String!
  password: String!
  active: Boolean
}

input PersonalInformationInput {
  id: ID
  dni: Int!
  firstname: String!
  lastname: String!
  address: String!
  phone: String!
  email: String
}

# Invoice Inputs
input InvoiceInput {
  type: InvoiceTypes!
  paymentType: PaymentTypes!
  paid: Boolean!
  note: String
  person: ID!
  products: [ProductInvoiceInput!]
}

input InvoiceUpdateInput {
  paymentType: PaymentTypes!
  paid: Boolean!
  note: String
}

input ProductInvoiceInput {
  product: ID!
  quantity: Int!
  price: Int!
}

# Treasury Inputs
input AccountInput {
  id: ID
  name: String!
  bank: String!
  type: AccountTypes!
  number: String!
}

# Inventory Inputs
input WarehouseInput {
  id: ID
  name: String!
  description: String
  active: Boolean!
}

input ProductInput {
  id: ID
  name: String!
  price: Int!
  stock: Int!
  iva: Int!
  description: String!
  active: Boolean!
  warehouse: ID!
}

type Query {
  # User
  getUser(id: ID!): User
  getUsers(limit: Int, offset: Int): [User]

  # PersonalInformation
  getPersonalInformation(id: ID!): PersonalInformation
  getPersonalInformations(limit: Int, offset: Int): [PersonalInformation]

  # Invoice
  getInvoice(id: ID!): Invoice
  getInvoices(limit: Int, offset: Int): [Invoice]

  # Account
  getAccount(id: ID!): Account
  getAccounts(limit: Int, offset: Int): [Account]

  # Warehouse
  getWarehouse(id: ID!): Warehouse
  getWarehouses(limit: Int, offset: Int): [Warehouse]

  # Product
  getProduct(id: ID!): Product
  getProducts(limit: Int, offset: Int): [Product]
}

type Mutation {
  # User
  newUser(input: UserInput!): User
  updateUser(input: UserInput!): User
  deleteUser(id: ID!): String

  # PersonalInformation
  newPersonalInformation(input: PersonalInformationInput!): PersonalInformation
  updatePersonalInformation(
    input: PersonalInformationInput!
  ): PersonalInformation
  deletePersonalInformation(id: ID!): String

  # Invoice
  newInvoice(input: InvoiceInput!): Invoice
  updateInvoice(input: InvoiceUpdateInput!): Invoice
  deleteInvoice(id: ID!): String

  # Account
  newAccount(input: AccountInput!): Account
  updateAccount(input: AccountInput!): Account
  deleteAccount(id: ID!): String

  # Warehouse
  newWarehouse(input: WarehouseInput!): Warehouse
  updateWarehouse(input: WarehouseInput!): Warehouse
  deleteWarehouse(id: ID!): String

  # Product
  newProduct(input: ProductInput!): Product
  updateProduct(input: ProductInput!): Product
  deleteProduct(id: ID!): String
}
